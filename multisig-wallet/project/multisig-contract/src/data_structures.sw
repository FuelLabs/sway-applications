library data_structures;

use std::{b512::B512, bytes::Bytes};

pub enum MessageFormat {
    None: (),
    EIP191PersonalSign: (),
}

pub enum MessagePrefix {
    None: (),
    Ethereum: (),
}

pub enum WalletType {
    Fuel: (),
    EVM: (),
}

pub struct SignatureInfo {
    /// The type of formatting of the message that was signed.
    message_format: MessageFormat,
    /// The type of prefix prepended to the message that was signed.
    message_prefix: MessagePrefix,
    /// The signature generated by signing over a message hash with the format and prefix specified in the `format` and `prefix` fields.
    signature: B512,
    /// The wallet type of the signer of the message.
    wallet_type: WalletType,
}

pub struct User {
    /// The wallet address of a user.
    address: b256,
    /// The number of approvals the user provides when approving.
    weight: u64,
}

pub struct Transaction {
    contract_identifier: ContractId,
    nonce: u64,
    value: Option<u64>,
    asset_id: Option<ContractId>,
    target: Identity,
    function_selector: Option<Bytes>,/// Could hash differently to rust as this might be hashing the struct rather than the Bytes.
                                     /// Could attempt to extract internal elements as done in Bytes.sha256
                                     /// Could refactor hashing to convert to Bytes and then use Bytes.sha256
    calldata: Option<Bytes>,
    single_value_type_arg: Option<bool>,
    forwarded_gas: Option<u64>,
}

pub enum TypeToHash {
    //Transaction: Transaction, // TODO: Uncomment when SDK supports `Bytes`. https://github.com/FuelLabs/fuels-rs/issues/723.
    User: User,
}
