/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type { Provider, BaseWalletLocked, AbstractAddress } from 'fuels';
import { Interface, Contract } from 'fuels';
import type { NFTContractAbi, NFTContractAbiInterface } from '../NFTContractAbi';
const _abi = {
  types: [
    {
      typeId: 0,
      type: '()',
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: 'b256',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 2,
      type: 'bool',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 3,
      type: 'enum AccessError',
      components: [
        {
          name: 'SenderCannotSetAccessControl',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'SenderNotAdmin',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'SenderNotOwner',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'SenderNotOwnerOrApproved',
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 4,
      type: 'enum Identity',
      components: [
        {
          name: 'Address',
          type: 10,
          typeArguments: null,
        },
        {
          name: 'ContractId',
          type: 14,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 5,
      type: 'enum InitError',
      components: [
        {
          name: 'AdminIsNone',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'CannotReinitialize',
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 6,
      type: 'enum InputError',
      components: [
        {
          name: 'AdminDoesNotExist',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'ApprovedDoesNotExist',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'NotEnoughTokensToMint',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'OwnerDoesNotExist',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'TokenDoesNotExist',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'TokenSupplyCannotBeZero',
          type: 0,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 7,
      type: 'enum Option',
      components: [
        {
          name: 'None',
          type: 0,
          typeArguments: null,
        },
        {
          name: 'Some',
          type: 8,
          typeArguments: null,
        },
      ],
      typeParameters: [8],
    },
    {
      typeId: 8,
      type: 'generic T',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 9,
      type: 'str[7]',
      components: null,
      typeParameters: null,
    },
    {
      typeId: 10,
      type: 'struct Address',
      components: [
        {
          name: 'value',
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 11,
      type: 'struct AdminEvent',
      components: [
        {
          name: 'admin',
          type: 7,
          typeArguments: [
            {
              name: '',
              type: 4,
              typeArguments: null,
            },
          ],
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 12,
      type: 'struct ApprovalEvent',
      components: [
        {
          name: 'approved',
          type: 7,
          typeArguments: [
            {
              name: '',
              type: 4,
              typeArguments: null,
            },
          ],
        },
        {
          name: 'owner',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 13,
      type: 'struct BurnEvent',
      components: [
        {
          name: 'owner',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 14,
      type: 'struct ContractId',
      components: [
        {
          name: 'value',
          type: 1,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 15,
      type: 'struct MintEvent',
      components: [
        {
          name: 'owner',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'token_id_start',
          type: 19,
          typeArguments: null,
        },
        {
          name: 'total_tokens',
          type: 19,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 16,
      type: 'struct OperatorEvent',
      components: [
        {
          name: 'approve',
          type: 2,
          typeArguments: null,
        },
        {
          name: 'operator',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'owner',
          type: 4,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 17,
      type: 'struct TokenMetaData',
      components: [
        {
          name: 'name',
          type: 9,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 18,
      type: 'struct TransferEvent',
      components: [
        {
          name: 'from',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'sender',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'to',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      typeParameters: null,
    },
    {
      typeId: 19,
      type: 'u64',
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: 'admin',
      output: {
        name: '',
        type: 4,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'approved',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      name: 'approve',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      name: 'approved',
      output: {
        name: '',
        type: 4,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'owner',
          type: 4,
          typeArguments: null,
        },
      ],
      name: 'balance_of',
      output: {
        name: '',
        type: 19,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      name: 'burn',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'access_control',
          type: 2,
          typeArguments: null,
        },
        {
          name: 'admin',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'max_supply',
          type: 19,
          typeArguments: null,
        },
      ],
      name: 'constructor',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'operator',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'owner',
          type: 4,
          typeArguments: null,
        },
      ],
      name: 'is_approved_for_all',
      output: {
        name: '',
        type: 2,
        typeArguments: null,
      },
    },
    {
      inputs: [],
      name: 'max_supply',
      output: {
        name: '',
        type: 19,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      name: 'meta_data',
      output: {
        name: '',
        type: 17,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'amount',
          type: 19,
          typeArguments: null,
        },
        {
          name: 'to',
          type: 4,
          typeArguments: null,
        },
      ],
      name: 'mint',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      name: 'owner_of',
      output: {
        name: '',
        type: 4,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'admin',
          type: 4,
          typeArguments: null,
        },
      ],
      name: 'set_admin',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'approve',
          type: 2,
          typeArguments: null,
        },
        {
          name: 'operator',
          type: 4,
          typeArguments: null,
        },
      ],
      name: 'set_approval_for_all',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
    {
      inputs: [],
      name: 'total_supply',
      output: {
        name: '',
        type: 19,
        typeArguments: null,
      },
    },
    {
      inputs: [
        {
          name: 'from',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'to',
          type: 4,
          typeArguments: null,
        },
        {
          name: 'token_id',
          type: 19,
          typeArguments: null,
        },
      ],
      name: 'transfer_from',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
    },
  ],
  loggedTypes: [
    {
      logId: 0,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 1,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 2,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 3,
      loggedType: {
        name: '',
        type: 12,
        typeArguments: [],
      },
    },
    {
      logId: 4,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 5,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 6,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 7,
      loggedType: {
        name: '',
        type: 13,
        typeArguments: [],
      },
    },
    {
      logId: 8,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 9,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 10,
      loggedType: {
        name: '',
        type: 5,
        typeArguments: [],
      },
    },
    {
      logId: 11,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 12,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 13,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 14,
      loggedType: {
        name: '',
        type: 15,
        typeArguments: [],
      },
    },
    {
      logId: 15,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 16,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 17,
      loggedType: {
        name: '',
        type: 11,
        typeArguments: [],
      },
    },
    {
      logId: 18,
      loggedType: {
        name: '',
        type: 16,
        typeArguments: [],
      },
    },
    {
      logId: 19,
      loggedType: {
        name: '',
        type: 6,
        typeArguments: [],
      },
    },
    {
      logId: 20,
      loggedType: {
        name: '',
        type: 3,
        typeArguments: [],
      },
    },
    {
      logId: 21,
      loggedType: {
        name: '',
        type: 18,
        typeArguments: [],
      },
    },
  ],
};

export class NFTContractAbi__factory {
  static readonly abi = _abi;
  static createInterface(): NFTContractAbiInterface {
    return new Interface(_abi) as unknown as NFTContractAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider
  ): NFTContractAbi {
    return new Contract(id, _abi, walletOrProvider) as unknown as NFTContractAbi;
  }
}
