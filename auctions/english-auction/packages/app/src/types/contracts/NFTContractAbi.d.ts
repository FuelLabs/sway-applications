/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

import type { Enum, Option } from './common';

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type TokenMetaDataInput = { name: string };

export type TokenMetaDataOutput = { name: string };

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

interface NFTContractAbiInterface extends Interface {
  functions: {
    admin: FunctionFragment;
    approve: FunctionFragment;
    approved: FunctionFragment;
    balance_of: FunctionFragment;
    burn: FunctionFragment;
    constructor: FunctionFragment;
    is_approved_for_all: FunctionFragment;
    max_supply: FunctionFragment;
    meta_data: FunctionFragment;
    mint: FunctionFragment;
    owner_of: FunctionFragment;
    set_admin: FunctionFragment;
    set_approval_for_all: FunctionFragment;
    total_supply: FunctionFragment;
    transfer_from: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'admin', values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'approved', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'balance_of', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'burn', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'constructor',
    values: [boolean, IdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: 'is_approved_for_all',
    values: [IdentityInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'max_supply', values?: undefined): Uint8Array;
  encodeFunctionData(functionFragment: 'meta_data', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'owner_of', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_admin', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'set_approval_for_all',
    values: [boolean, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'total_supply', values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: 'transfer_from',
    values: [IdentityInput, IdentityInput, BigNumberish]
  ): Uint8Array;

  decodeFunctionData(functionFragment: 'admin', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'approve', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'approved', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'balance_of', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'burn', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'is_approved_for_all', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'max_supply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'meta_data', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'owner_of', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_admin', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_approval_for_all', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_supply', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer_from', data: BytesLike): DecodedValue;
}

export class NFTContractAbi extends Contract {
  interface: NFTContractAbiInterface;
  functions: {
    admin: InvokeFunction<[], IdentityOutput>;

    approve: InvokeFunction<[approved: IdentityInput, token_id: BigNumberish], void>;

    approved: InvokeFunction<[token_id: BigNumberish], IdentityOutput>;

    balance_of: InvokeFunction<[owner: IdentityInput], BN>;

    burn: InvokeFunction<[token_id: BigNumberish], void>;

    constructor: InvokeFunction<
      [access_control: boolean, admin: IdentityInput, max_supply: BigNumberish],
      void
    >;

    is_approved_for_all: InvokeFunction<[operator: IdentityInput, owner: IdentityInput], boolean>;

    max_supply: InvokeFunction<[], BN>;

    meta_data: InvokeFunction<[token_id: BigNumberish], TokenMetaDataOutput>;

    mint: InvokeFunction<[amount: BigNumberish, to: IdentityInput], void>;

    owner_of: InvokeFunction<[token_id: BigNumberish], IdentityOutput>;

    set_admin: InvokeFunction<[admin: IdentityInput], void>;

    set_approval_for_all: InvokeFunction<[approve: boolean, operator: IdentityInput], void>;

    total_supply: InvokeFunction<[], BN>;

    transfer_from: InvokeFunction<
      [from: IdentityInput, to: IdentityInput, token_id: BigNumberish],
      void
    >;
  };
}
