/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

import type { Enum, Option } from './common';

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type NFTAssetInput = {
  asset_id: ContractIdInput;
  token_id: BigNumberish;
};

export type NFTAssetOutput = { asset_id: ContractIdOutput; token_id: BN };

export type TokenAssetInput = {
  amount: BigNumberish;
  asset_id: ContractIdInput;
};

export type TokenAssetOutput = { amount: BN; asset_id: ContractIdOutput };

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type AuctionInput = {
  bid_asset: AuctionAssetInput;
  end_block: BigNumberish;
  highest_bidder: OptionInput;
  initial_price: BigNumberish;
  reserve_price: OptionInput;
  sell_asset: AuctionAssetInput;
  seller: IdentityInput;
  state: StateInput;
};

export type AuctionOutput = {
  bid_asset: AuctionAssetOutput;
  end_block: BN;
  highest_bidder: OptionOutput;
  initial_price: BN;
  reserve_price: OptionOutput;
  sell_asset: AuctionAssetOutput;
  seller: IdentityOutput;
  state: StateOutput;
};

export type AuctionAssetInput = Enum<{
  NFTAsset: NFTAssetInput;
  TokenAsset: TokenAssetInput;
}>;

export type AuctionAssetOutput = Enum<{
  NFTAsset: NFTAssetOutput;
  TokenAsset: TokenAssetOutput;
}>;

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

export type OptionInput = Option<[]>;

export type OptionOutput = Option<[]>;

export type StateInput = Enum<{ Closed: []; Open: [] }>;

export type StateOutput = Enum<{ Closed: []; Open: [] }>;

interface EnglishAuctionAbiInterface extends Interface {
  functions: {
    auction_info: FunctionFragment;
    bid: FunctionFragment;
    cancel: FunctionFragment;
    create: FunctionFragment;
    deposit_balance: FunctionFragment;
    withdraw: FunctionFragment;
    total_auctions: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'auction_info', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'bid',
    values: [BigNumberish, AuctionAssetInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'cancel', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'create',
    values: [
      AuctionAssetInput,
      BigNumberish,
      BigNumberish,
      OptionInput,
      IdentityInput,
      AuctionAssetInput
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: 'deposit_balance',
    values: [BigNumberish, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'total_auctions', values?: undefined): Uint8Array;

  decodeFunctionData(functionFragment: 'auction_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'bid', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'cancel', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_auctions', data: BytesLike): DecodedValue;
}

export class EnglishAuctionAbi extends Contract {
  interface: EnglishAuctionAbiInterface;
  functions: {
    auction_info: InvokeFunction<[auction_id: BigNumberish], OptionOutput>;

    bid: InvokeFunction<[auction_id: BigNumberish, bid_asset: AuctionAssetInput], void>;

    cancel: InvokeFunction<[auction_id: BigNumberish], void>;

    create: InvokeFunction<
      [
        bid_asset: AuctionAssetInput,
        duration: BigNumberish,
        initial_price: BigNumberish,
        reserve_price: OptionInput,
        seller: IdentityInput,
        sell_asset: AuctionAssetInput
      ],
      BN
    >;

    deposit_balance: InvokeFunction<
      [auction_id: BigNumberish, identity: IdentityInput],
      OptionOutput
    >;

    withdraw: InvokeFunction<[auction_id: BigNumberish], void>;

    total_auctions: InvokeFunction<[], BN>;
  };
}
