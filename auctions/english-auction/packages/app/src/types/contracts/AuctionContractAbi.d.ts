/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.29.1
  Forc version: 0.32.2
  Fuel-Core version: 0.15.1
*/

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

import type { Option, Enum } from './common';

export type AccessErrorInput = Enum<{
  AuctionIsNotClosed: [];
  AuctionIsNotOpen: [];
  NFTTransferNotApproved: [];
  SenderIsNotSeller: [];
}>;
export type AccessErrorOutput = AccessErrorInput;
export type AssetErrorInput = Enum<{ AssetsAreNotTheSame: [] }>;
export type AssetErrorOutput = AssetErrorInput;
export type AuctionAssetInput = Enum<{ NFTAsset: NFTAssetInput; TokenAsset: TokenAssetInput }>;
export type AuctionAssetOutput = Enum<{ NFTAsset: NFTAssetOutput; TokenAsset: TokenAssetOutput }>;
export type IdentityInput = Enum<{ Address: AddressInput; ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput; ContractId: ContractIdOutput }>;
export type InitErrorInput = Enum<{
  AuctionDurationNotProvided: [];
  BidAssetAmountNotZero: [];
  CannotAcceptMoreThanOneNFT: [];
  InitialPriceCannotBeZero: [];
  ReserveLessThanInitialPrice: [];
}>;
export type InitErrorOutput = InitErrorInput;
export type InputErrorInput = Enum<{
  AuctionDoesNotExist: [];
  InitialPriceNotMet: [];
  IncorrectAmountProvided: [];
  IncorrectAssetProvided: [];
}>;
export type InputErrorOutput = InputErrorInput;
export type StateInput = Enum<{ Closed: []; Open: [] }>;
export type StateOutput = StateInput;
export type UserErrorInput = Enum<{ BidderIsSeller: []; UserHasAlreadyWithdrawn: [] }>;
export type UserErrorOutput = UserErrorInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AuctionInput = {
  bid_asset: AuctionAssetInput;
  end_block: BigNumberish;
  highest_bidder: Option<IdentityInput>;
  initial_price: BigNumberish;
  reserve_price: Option<BigNumberish>;
  sell_asset: AuctionAssetInput;
  seller: IdentityInput;
  state: StateInput;
};
export type AuctionOutput = {
  bid_asset: AuctionAssetOutput;
  end_block: BN;
  highest_bidder: Option<IdentityOutput>;
  initial_price: BN;
  reserve_price: Option<BN>;
  sell_asset: AuctionAssetOutput;
  seller: IdentityOutput;
  state: StateOutput;
};
export type BidEventInput = { amount: BigNumberish; auction_id: BigNumberish; user: IdentityInput };
export type BidEventOutput = { amount: BN; auction_id: BN; user: IdentityOutput };
export type CancelAuctionEventInput = { auction_id: BigNumberish };
export type CancelAuctionEventOutput = { auction_id: BN };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type CreateAuctionEventInput = {
  auction_id: BigNumberish;
  bid_asset: AuctionAssetInput;
  sell_asset: AuctionAssetInput;
};
export type CreateAuctionEventOutput = {
  auction_id: BN;
  bid_asset: AuctionAssetOutput;
  sell_asset: AuctionAssetOutput;
};
export type NFTAssetInput = { asset_id: ContractIdInput; token_id: BigNumberish };
export type NFTAssetOutput = { asset_id: ContractIdOutput; token_id: BN };
export type TokenAssetInput = { amount: BigNumberish; asset_id: ContractIdInput };
export type TokenAssetOutput = { amount: BN; asset_id: ContractIdOutput };
export type WithdrawEventInput = {
  asset: AuctionAssetInput;
  auction_id: BigNumberish;
  user: IdentityInput;
};
export type WithdrawEventOutput = {
  asset: AuctionAssetOutput;
  auction_id: BN;
  user: IdentityOutput;
};

interface AuctionContractAbiInterface extends Interface {
  functions: {
    auction_info: FunctionFragment;
    bid: FunctionFragment;
    cancel: FunctionFragment;
    create: FunctionFragment;
    deposit_balance: FunctionFragment;
    total_auctions: FunctionFragment;
    withdraw: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'auction_info', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'bid',
    values: [BigNumberish, AuctionAssetInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'cancel', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'create',
    values: [
      AuctionAssetInput,
      BigNumberish,
      BigNumberish,
      Option<BigNumberish>,
      IdentityInput,
      AuctionAssetInput
    ]
  ): Uint8Array;
  encodeFunctionData(
    functionFragment: 'deposit_balance',
    values: [BigNumberish, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'total_auctions', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): Uint8Array;

  decodeFunctionData(functionFragment: 'auction_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'bid', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'cancel', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_auctions', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
}

export class AuctionContractAbi extends Contract {
  interface: AuctionContractAbiInterface;
  functions: {
    auction_info: InvokeFunction<[auction_id: BigNumberish], Option<AuctionOutput>>;
    bid: InvokeFunction<[auction_id: BigNumberish, bid_asset: AuctionAssetInput], void>;
    cancel: InvokeFunction<[auction_id: BigNumberish], void>;
    create: InvokeFunction<
      [
        bid_asset: AuctionAssetInput,
        duration: BigNumberish,
        initial_price: BigNumberish,
        reserve_price: Option<BigNumberish>,
        seller: IdentityInput,
        sell_asset: AuctionAssetInput
      ],
      BN
    >;
    deposit_balance: InvokeFunction<
      [auction_id: BigNumberish, identity: IdentityInput],
      Option<AuctionAssetOutput>
    >;
    total_auctions: InvokeFunction<[], BN>;
    withdraw: InvokeFunction<[auction_id: BigNumberish], void>;
  };
}
