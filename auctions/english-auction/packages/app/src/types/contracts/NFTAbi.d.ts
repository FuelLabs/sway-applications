/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

import type { Enum, Option } from './common';

export type AddressInput = { value: string };

export type AddressOutput = { value: string };

export type ContractIdInput = { value: string };

export type ContractIdOutput = { value: string };

export type IdentityInput = Enum<{
  Address: AddressInput;
  ContractId: ContractIdInput;
}>;

export type IdentityOutput = Enum<{
  Address: AddressOutput;
  ContractId: ContractIdOutput;
}>;

export type OptionalIdentityInput = Option<IdentityInput>;

export type OptionalIdentityOutput = Option<IdentityOutput>;

interface NFTAbiInterface extends Interface {
  functions: {
    approve: FunctionFragment;
    approved: FunctionFragment;
    balance_of: FunctionFragment;
    is_approved_for_all: FunctionFragment;
    mint: FunctionFragment;
    owner_of: FunctionFragment;
    set_approval_for_all: FunctionFragment;
    tokens_minted: FunctionFragment;
    transfer: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'approve',
    values: [OptionalIdentityInput, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'approved', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'balance_of', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'is_approved_for_all',
    values: [IdentityInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'owner_of', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'set_approval_for_all',
    values: [boolean, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'tokens_minted', values?: undefined): Uint8Array;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [IdentityInput, BigNumberish]
  ): Uint8Array;

  decodeFunctionData(functionFragment: 'approve', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'approved', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'balance_of', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'is_approved_for_all', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'owner_of', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_approval_for_all', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'tokens_minted', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer', data: BytesLike): DecodedValue;
}

export class NFTAbi extends Contract {
  interface: NFTAbiInterface;
  functions: {
    approve: InvokeFunction<
      [approved_identity: OptionalIdentityInput, token_id: BigNumberish],
      void
    >;

    approved: InvokeFunction<[token_id: BigNumberish], OptionalIdentityOutput>;

    balance_of: InvokeFunction<[owner: IdentityInput], BN>;

    is_approved_for_all: InvokeFunction<[operator: IdentityInput, owner: IdentityInput], boolean>;

    mint: InvokeFunction<[amount: BigNumberish, to: IdentityInput], void>;

    owner_of: InvokeFunction<[token_id: BigNumberish], OptionalIdentityOutput>;

    set_approval_for_all: InvokeFunction<[approval: boolean, operator: IdentityInput], void>;

    tokens_minted: InvokeFunction<[], BN>;

    transfer: InvokeFunction<[to: IdentityInput, token_id: BigNumberish], void>;
  };
}
