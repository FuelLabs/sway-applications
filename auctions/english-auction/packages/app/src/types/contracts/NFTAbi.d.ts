/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.29.1
  Forc version: 0.32.2
  Fuel-Core version: 0.15.1
*/

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

import type { Option, Enum } from './common';

export type AccessErrorInput = Enum<{
  OwnerDoesNotExist: [];
  SenderNotOwner: [];
  SenderNotOwnerOrApproved: [];
}>;
export type AccessErrorOutput = AccessErrorInput;
export type IdentityInput = Enum<{ Address: AddressInput; ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput; ContractId: ContractIdOutput }>;
export type InputErrorInput = Enum<{ TokenAlreadyExists: []; TokenDoesNotExist: [] }>;
export type InputErrorOutput = InputErrorInput;

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ApprovalEventInput = {
  approved: Option<IdentityInput>;
  owner: IdentityInput;
  token_id: BigNumberish;
};
export type ApprovalEventOutput = {
  approved: Option<IdentityOutput>;
  owner: IdentityOutput;
  token_id: BN;
};
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type MintEventInput = { owner: IdentityInput; token_id: BigNumberish };
export type MintEventOutput = { owner: IdentityOutput; token_id: BN };
export type OperatorEventInput = {
  approved: boolean;
  operator: IdentityInput;
  owner: IdentityInput;
};
export type OperatorEventOutput = {
  approved: boolean;
  operator: IdentityOutput;
  owner: IdentityOutput;
};
export type TransferEventInput = {
  from: IdentityInput;
  sender: IdentityInput;
  to: IdentityInput;
  token_id: BigNumberish;
};
export type TransferEventOutput = {
  from: IdentityOutput;
  sender: IdentityOutput;
  to: IdentityOutput;
  token_id: BN;
};

interface NFTAbiInterface extends Interface {
  functions: {
    approve: FunctionFragment;
    approved: FunctionFragment;
    balance_of: FunctionFragment;
    is_approved_for_all: FunctionFragment;
    mint: FunctionFragment;
    owner_of: FunctionFragment;
    set_approval_for_all: FunctionFragment;
    tokens_minted: FunctionFragment;
    transfer: FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'approve',
    values: [Option<IdentityInput>, BigNumberish]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'approved', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'balance_of', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'is_approved_for_all',
    values: [IdentityInput, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'mint', values: [BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'owner_of', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(
    functionFragment: 'set_approval_for_all',
    values: [boolean, IdentityInput]
  ): Uint8Array;
  encodeFunctionData(functionFragment: 'tokens_minted', values: []): Uint8Array;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [IdentityInput, BigNumberish]
  ): Uint8Array;

  decodeFunctionData(functionFragment: 'approve', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'approved', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'balance_of', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'is_approved_for_all', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'mint', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'owner_of', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_approval_for_all', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'tokens_minted', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'transfer', data: BytesLike): DecodedValue;
}

export class NFTAbi extends Contract {
  interface: NFTAbiInterface;
  functions: {
    approve: InvokeFunction<
      [approved_identity: Option<IdentityInput>, token_id: BigNumberish],
      void
    >;
    approved: InvokeFunction<[token_id: BigNumberish], Option<IdentityOutput>>;
    balance_of: InvokeFunction<[owner: IdentityInput], BN>;
    is_approved_for_all: InvokeFunction<[operator: IdentityInput, owner: IdentityInput], boolean>;
    mint: InvokeFunction<[amount: BigNumberish, to: IdentityInput], void>;
    owner_of: InvokeFunction<[token_id: BigNumberish], Option<IdentityOutput>>;
    set_approval_for_all: InvokeFunction<[approval: boolean, operator: IdentityInput], void>;
    tokens_minted: InvokeFunction<[], BN>;
    transfer: InvokeFunction<[to: IdentityInput, token_id: BigNumberish], void>;
  };
}
