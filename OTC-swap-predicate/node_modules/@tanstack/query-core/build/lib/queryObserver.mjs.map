{"version":3,"file":"queryObserver.mjs","sources":["../../src/queryObserver.ts"],"sourcesContent":["import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n"],"names":["QueryObserver","Subscribable","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","process","env","NODE_ENV","isDataEqual","getLogger","error","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","createResult","getCurrentResult","currentResult","trackResult","result","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","cancelRefetch","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","time","timeUntilStale","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","refetchInterval","data","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","shouldNotifyListeners","notifyOnChangeProps","size","includedProps","useErrorBoundary","some","typedKey","changed","has","onQueryUpdate","action","onSuccess","manual","isCancelledError","onError","notifyManager","batch","onSettled","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","value","suspense","isStaleByTime"],"mappings":"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"}