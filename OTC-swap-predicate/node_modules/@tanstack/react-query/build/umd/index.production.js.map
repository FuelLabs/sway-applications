{"version":3,"file":"index.production.js","sources":["../../../query-core/build/lib/subscribable.mjs","../../../query-core/build/lib/utils.mjs","../../../query-core/build/lib/focusManager.mjs","../../../query-core/build/lib/onlineManager.mjs","../../../query-core/build/lib/retryer.mjs","../../../query-core/build/lib/logger.mjs","../../../query-core/build/lib/notifyManager.mjs","../../../query-core/build/lib/removable.mjs","../../../query-core/build/lib/query.mjs","../../../query-core/build/lib/queryCache.mjs","../../../query-core/build/lib/mutation.mjs","../../../query-core/build/lib/mutationCache.mjs","../../../query-core/build/lib/infiniteQueryBehavior.mjs","../../../query-core/build/lib/queryObserver.mjs","../../../query-core/build/lib/queriesObserver.mjs","../../../query-core/build/lib/infiniteQueryObserver.mjs","../../../query-core/build/lib/mutationObserver.mjs","../../../query-core/build/lib/hydration.mjs","../../src/reactBatchedUpdates.ts","../../src/setBatchUpdatesFn.ts","../../../../node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/shim/index.js","../../../../node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../../src/useSyncExternalStore.ts","../../src/QueryClientProvider.tsx","../../src/isRestoring.tsx","../../src/QueryErrorResetBoundary.tsx","../../src/utils.ts","../../src/errorBoundaryUtils.ts","../../src/suspense.ts","../../src/useBaseQuery.ts","../../src/Hydrate.tsx","../../src/useMutation.ts","../../../query-core/build/lib/queryClient.mjs","../../src/useInfiniteQuery.ts","../../src/useIsFetching.ts","../../src/useIsMutating.ts","../../src/useQueries.ts","../../src/useQuery.ts"],"sourcesContent":["class Subscribable {\n  constructor() {\n    this.listeners = [];\n    this.subscribe = this.subscribe.bind(this);\n  }\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    this.onSubscribe();\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== listener);\n      this.onUnsubscribe();\n    };\n  }\n\n  hasListeners() {\n    return this.listeners.length > 0;\n  }\n\n  onSubscribe() {// Do nothing\n  }\n\n  onUnsubscribe() {// Do nothing\n  }\n\n}\n\nexport { Subscribable };\n//# sourceMappingURL=subscribable.mjs.map\n","// TYPES\n// UTILS\nconst isServer = typeof window === 'undefined' || 'Deno' in window;\nfunction noop() {\n  return undefined;\n}\nfunction functionalUpdate(updater, input) {\n  return typeof updater === 'function' ? updater(input) : updater;\n}\nfunction isValidTimeout(value) {\n  return typeof value === 'number' && value >= 0 && value !== Infinity;\n}\nfunction difference(array1, array2) {\n  return array1.filter(x => array2.indexOf(x) === -1);\n}\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nfunction timeUntilStale(updatedAt, staleTime) {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n  if (!isQueryKey(arg1)) {\n    return arg1;\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3,\n      queryKey: arg1,\n      queryFn: arg2\n    };\n  }\n\n  return { ...arg2,\n    queryKey: arg1\n  };\n}\nfunction parseMutationArgs(arg1, arg2, arg3) {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3,\n        mutationKey: arg1,\n        mutationFn: arg2\n      };\n    }\n\n    return { ...arg2,\n      mutationKey: arg1\n    };\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2,\n      mutationFn: arg1\n    };\n  }\n\n  return { ...arg1\n  };\n}\nfunction parseFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    queryKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction parseMutationFilterArgs(arg1, arg2, arg3) {\n  return isQueryKey(arg1) ? [{ ...arg2,\n    mutationKey: arg1\n  }, arg3] : [arg1 || {}, arg2];\n}\nfunction matchQuery(filters, query) {\n  const {\n    type = 'all',\n    exact,\n    fetchStatus,\n    predicate,\n    queryKey,\n    stale\n  } = filters;\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false;\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false;\n    }\n  }\n\n  if (type !== 'all') {\n    const isActive = query.isActive();\n\n    if (type === 'active' && !isActive) {\n      return false;\n    }\n\n    if (type === 'inactive' && isActive) {\n      return false;\n    }\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false;\n  }\n\n  if (typeof fetchStatus !== 'undefined' && fetchStatus !== query.state.fetchStatus) {\n    return false;\n  }\n\n  if (predicate && !predicate(query)) {\n    return false;\n  }\n\n  return true;\n}\nfunction matchMutation(filters, mutation) {\n  const {\n    exact,\n    fetching,\n    predicate,\n    mutationKey\n  } = filters;\n\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false;\n    }\n\n    if (exact) {\n      if (hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)) {\n        return false;\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false;\n    }\n  }\n\n  if (typeof fetching === 'boolean' && mutation.state.status === 'loading' !== fetching) {\n    return false;\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false;\n  }\n\n  return true;\n}\nfunction hashQueryKeyByOptions(queryKey, options) {\n  const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashQueryKey;\n  return hashFn(queryKey);\n}\n/**\n * Default query keys hash function.\n * Hashes the value into a stable hash.\n */\n\nfunction hashQueryKey(queryKey) {\n  return JSON.stringify(queryKey, (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {\n    result[key] = val[key];\n    return result;\n  }, {}) : val);\n}\n/**\n * Checks if key `b` partially matches with key `a`.\n */\n\nfunction partialMatchKey(a, b) {\n  return partialDeepEqual(a, b);\n}\n/**\n * Checks if `b` partially matches with `a`.\n */\n\nfunction partialDeepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (typeof a !== typeof b) {\n    return false;\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]));\n  }\n\n  return false;\n}\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\n\nfunction replaceEqualDeep(a, b) {\n  if (a === b) {\n    return a;\n  }\n\n  const array = isPlainArray(a) && isPlainArray(b);\n\n  if (array || isPlainObject(a) && isPlainObject(b)) {\n    const aSize = array ? a.length : Object.keys(a).length;\n    const bItems = array ? b : Object.keys(b);\n    const bSize = bItems.length;\n    const copy = array ? [] : {};\n    let equalItems = 0;\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i];\n      copy[key] = replaceEqualDeep(a[key], b[key]);\n\n      if (copy[key] === a[key]) {\n        equalItems++;\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy;\n  }\n\n  return b;\n}\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\n\nfunction shallowEqualObjects(a, b) {\n  if (a && !b || b && !a) {\n    return false;\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nfunction isPlainArray(value) {\n  return Array.isArray(value) && value.length === Object.keys(value).length;\n} // Copied from: https://github.com/jonschlinkert/is-plain-object\n\nfunction isPlainObject(o) {\n  if (!hasObjectPrototype(o)) {\n    return false;\n  } // If has modified constructor\n\n\n  const ctor = o.constructor;\n\n  if (typeof ctor === 'undefined') {\n    return true;\n  } // If has modified prototype\n\n\n  const prot = ctor.prototype;\n\n  if (!hasObjectPrototype(prot)) {\n    return false;\n  } // If constructor does not have an Object-specific method\n\n\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false;\n  } // Most likely a plain Object\n\n\n  return true;\n}\n\nfunction hasObjectPrototype(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isQueryKey(value) {\n  return Array.isArray(value);\n}\nfunction isError(value) {\n  return value instanceof Error;\n}\nfunction sleep(timeout) {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout);\n  });\n}\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\n\nfunction scheduleMicrotask(callback) {\n  sleep(0).then(callback);\n}\nfunction getAbortController() {\n  if (typeof AbortController === 'function') {\n    return new AbortController();\n  }\n\n  return;\n}\nfunction replaceData(prevData, data, options) {\n  // Use prev data if an isDataEqual function is defined and returns `true`\n  if (options.isDataEqual != null && options.isDataEqual(prevData, data)) {\n    return prevData;\n  } else if (typeof options.structuralSharing === 'function') {\n    return options.structuralSharing(prevData, data);\n  } else if (options.structuralSharing !== false) {\n    // Structurally share data between prev and new data if needed\n    return replaceEqualDeep(prevData, data);\n  }\n\n  return data;\n}\n\nexport { difference, functionalUpdate, getAbortController, hashQueryKey, hashQueryKeyByOptions, isError, isPlainArray, isPlainObject, isQueryKey, isServer, isValidTimeout, matchMutation, matchQuery, noop, parseFilterArgs, parseMutationArgs, parseMutationFilterArgs, parseQueryArgs, partialDeepEqual, partialMatchKey, replaceAt, replaceData, replaceEqualDeep, scheduleMicrotask, shallowEqualObjects, sleep, timeUntilStale };\n//# sourceMappingURL=utils.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass FocusManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onFocus => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onFocus(); // Listen to visibillitychange and focus\n\n\n        window.addEventListener('visibilitychange', listener, false);\n        window.addEventListener('focus', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener);\n          window.removeEventListener('focus', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(focused => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused);\n      } else {\n        this.onFocus();\n      }\n    });\n  }\n\n  setFocused(focused) {\n    this.focused = focused;\n\n    if (focused) {\n      this.onFocus();\n    }\n  }\n\n  onFocus() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isFocused() {\n    if (typeof this.focused === 'boolean') {\n      return this.focused;\n    } // document global can be unavailable in react native\n\n\n    if (typeof document === 'undefined') {\n      return true;\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(document.visibilityState);\n  }\n\n}\nconst focusManager = new FocusManager();\n\nexport { FocusManager, focusManager };\n//# sourceMappingURL=focusManager.mjs.map\n","import { Subscribable } from './subscribable.mjs';\nimport { isServer } from './utils.mjs';\n\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n\n        window.addEventListener('online', listener, false);\n        window.addEventListener('offline', listener, false);\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener);\n          window.removeEventListener('offline', listener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n\n  setEventListener(setup) {\n    var _this$cleanup2;\n\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n\n  setOnline(online) {\n    this.online = online;\n\n    if (online) {\n      this.onOnline();\n    }\n  }\n\n  onOnline() {\n    this.listeners.forEach(listener => {\n      listener();\n    });\n  }\n\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n\n    return navigator.onLine;\n  }\n\n}\nconst onlineManager = new OnlineManager();\n\nexport { OnlineManager, onlineManager };\n//# sourceMappingURL=onlineManager.mjs.map\n","import { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { sleep } from './utils.mjs';\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1000 * 2 ** failureCount, 30000);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode != null ? networkMode : 'online') === 'online' ? onlineManager.isOnline() : true;\n}\nclass CancelledError {\n  constructor(options) {\n    this.revert = options == null ? void 0 : options.revert;\n    this.silent = options == null ? void 0 : options.silent;\n  }\n\n}\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort == null ? void 0 : config.abort();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== 'always' && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess == null ? void 0 : config.onSuccess(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError == null ? void 0 : config.onError(value);\n      continueFn == null ? void 0 : continueFn();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        if (isResolved || !shouldPause()) {\n          return continueResolve(value);\n        }\n      };\n\n      config.onPause == null ? void 0 : config.onPause();\n    }).then(() => {\n      continueFn = undefined;\n\n      if (!isResolved) {\n        config.onContinue == null ? void 0 : config.onContinue();\n      }\n    });\n  }; // Create loop function\n\n\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue; // Execute query\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      var _config$retry, _config$retryDelay;\n\n      // Stop if the fetch is already resolved\n      if (isResolved) {\n        return;\n      } // Do we need to retry the request?\n\n\n      const retry = (_config$retry = config.retry) != null ? _config$retry : 3;\n      const retryDelay = (_config$retryDelay = config.retryDelay) != null ? _config$retryDelay : defaultRetryDelay;\n      const delay = typeof retryDelay === 'function' ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === 'number' && failureCount < retry || typeof retry === 'function' && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        // We are done if the query does not need to be retried\n        reject(error);\n        return;\n      }\n\n      failureCount++; // Notify on fail\n\n      config.onFail == null ? void 0 : config.onFail(failureCount, error); // Delay\n\n      sleep(delay) // Pause if the document is not visible or when the device is offline\n      .then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n\n        return;\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  }; // Start loop\n\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      continueFn == null ? void 0 : continueFn();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };\n//# sourceMappingURL=retryer.mjs.map\n","const defaultLogger = console;\n\nexport { defaultLogger };\n//# sourceMappingURL=logger.mjs.map\n","import { scheduleMicrotask } from './utils.mjs';\n\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n\n  const batchCalls = callback => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\n\nexport { createNotifyManager, notifyManager };\n//# sourceMappingURL=notifyManager.mjs.map\n","import { isValidTimeout, isServer } from './utils.mjs';\n\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n\n}\n\nexport { Removable };\n//# sourceMappingURL=removable.mjs.map\n","import { replaceData, noop, timeUntilStale, getAbortController } from './utils.mjs';\nimport { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { createRetryer, isCancelledError, canFetch } from './retryer.mjs';\nimport { Removable } from './removable.mjs';\n\n// CLASS\nclass Query extends Removable {\n  constructor(config) {\n    super();\n    this.abortSignalConsumed = false;\n    this.defaultOptions = config.defaultOptions;\n    this.setOptions(config.options);\n    this.observers = [];\n    this.cache = config.cache;\n    this.logger = config.logger || defaultLogger;\n    this.queryKey = config.queryKey;\n    this.queryHash = config.queryHash;\n    this.initialState = config.state || getDefaultState(this.options);\n    this.state = this.initialState;\n    this.scheduleGc();\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setOptions(options) {\n    this.options = { ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n\n  optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.cache.remove(this);\n    }\n  }\n\n  setData(newData, options) {\n    const data = replaceData(this.state.data, newData, this.options); // Set data and mark it as cached\n\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options == null ? void 0 : options.updatedAt,\n      manual: options == null ? void 0 : options.manual\n    });\n    return data;\n  }\n\n  setState(state, setStateOptions) {\n    this.dispatch({\n      type: 'setState',\n      state,\n      setStateOptions\n    });\n  }\n\n  cancel(options) {\n    var _this$retryer;\n\n    const promise = this.promise;\n    (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.cancel(options);\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n  }\n\n  destroy() {\n    super.destroy();\n    this.cancel({\n      silent: true\n    });\n  }\n\n  reset() {\n    this.destroy();\n    this.setState(this.initialState);\n  }\n\n  isActive() {\n    return this.observers.some(observer => observer.options.enabled !== false);\n  }\n\n  isDisabled() {\n    return this.getObserversCount() > 0 && !this.isActive();\n  }\n\n  isStale() {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || this.observers.some(observer => observer.getCurrentResult().isStale);\n  }\n\n  isStaleByTime(staleTime = 0) {\n    return this.state.isInvalidated || !this.state.dataUpdatedAt || !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n  }\n\n  onFocus() {\n    var _this$retryer2;\n\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer2 = this.retryer) == null ? void 0 : _this$retryer2.continue();\n  }\n\n  onOnline() {\n    var _this$retryer3;\n\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect());\n\n    if (observer) {\n      observer.refetch({\n        cancelRefetch: false\n      });\n    } // Continue fetch if currently paused\n\n\n    (_this$retryer3 = this.retryer) == null ? void 0 : _this$retryer3.continue();\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the query from being garbage collected\n\n      this.clearGcTimeout();\n      this.cache.notify({\n        type: 'observerAdded',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer);\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.abortSignalConsumed) {\n            this.retryer.cancel({\n              revert: true\n            });\n          } else {\n            this.retryer.cancelRetry();\n          }\n        }\n\n        this.scheduleGc();\n      }\n\n      this.cache.notify({\n        type: 'observerRemoved',\n        query: this,\n        observer\n      });\n    }\n  }\n\n  getObserversCount() {\n    return this.observers.length;\n  }\n\n  invalidate() {\n    if (!this.state.isInvalidated) {\n      this.dispatch({\n        type: 'invalidate'\n      });\n    }\n  }\n\n  fetch(options, fetchOptions) {\n    var _this$options$behavio, _context$fetchOptions;\n\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.dataUpdatedAt && fetchOptions != null && fetchOptions.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({\n          silent: true\n        });\n      } else if (this.promise) {\n        var _this$retryer4;\n\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        (_this$retryer4 = this.retryer) == null ? void 0 : _this$retryer4.continueRetry(); // Return current promise if we are already fetching\n\n        return this.promise;\n      }\n    } // Update config if passed, otherwise the config from the last execution is used\n\n\n    if (options) {\n      this.setOptions(options);\n    } // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n\n\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn);\n\n      if (observer) {\n        this.setOptions(observer.options);\n      }\n    }\n\n    if (!Array.isArray(this.options.queryKey)) {\n      if (process.env.NODE_ENV !== 'production') {\n        this.logger.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n      }\n    }\n\n    const abortController = getAbortController(); // Create query function context\n\n    const queryFnContext = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n      meta: this.meta\n    }; // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n\n    const addSignalProperty = object => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          if (abortController) {\n            this.abortSignalConsumed = true;\n            return abortController.signal;\n          }\n\n          return undefined;\n        }\n      });\n    };\n\n    addSignalProperty(queryFnContext); // Create fetch function\n\n    const fetchFn = () => {\n      if (!this.options.queryFn) {\n        return Promise.reject('Missing queryFn');\n      }\n\n      this.abortSignalConsumed = false;\n      return this.options.queryFn(queryFnContext);\n    }; // Trigger behavior hook\n\n\n    const context = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn\n    };\n    addSignalProperty(context);\n    (_this$options$behavio = this.options.behavior) == null ? void 0 : _this$options$behavio.onFetch(context); // Store state in case the current fetch needs to be reverted\n\n    this.revertState = this.state; // Set to fetching state if not already in it\n\n    if (this.state.fetchStatus === 'idle' || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) == null ? void 0 : _context$fetchOptions.meta)) {\n      var _context$fetchOptions2;\n\n      this.dispatch({\n        type: 'fetch',\n        meta: (_context$fetchOptions2 = context.fetchOptions) == null ? void 0 : _context$fetchOptions2.meta\n      });\n    }\n\n    const onError = error => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n\n      if (!isCancelledError(error)) {\n        var _this$cache$config$on, _this$cache$config;\n\n        // Notify cache callback\n        (_this$cache$config$on = (_this$cache$config = this.cache.config).onError) == null ? void 0 : _this$cache$config$on.call(_this$cache$config, error, this);\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n      }\n\n      if (!this.isFetchingOptimistic) {\n        // Schedule query gc after fetching\n        this.scheduleGc();\n      }\n\n      this.isFetchingOptimistic = false;\n    }; // Try to fetch the data\n\n\n    this.retryer = createRetryer({\n      fn: context.fetchFn,\n      abort: abortController == null ? void 0 : abortController.abort.bind(abortController),\n      onSuccess: data => {\n        var _this$cache$config$on2, _this$cache$config2;\n\n        if (typeof data === 'undefined') {\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \" + this.queryHash);\n          }\n\n          onError(new Error('undefined'));\n          return;\n        }\n\n        this.setData(data); // Notify cache callback\n\n        (_this$cache$config$on2 = (_this$cache$config2 = this.cache.config).onSuccess) == null ? void 0 : _this$cache$config$on2.call(_this$cache$config2, data, this);\n\n        if (!this.isFetchingOptimistic) {\n          // Schedule query gc after fetching\n          this.scheduleGc();\n        }\n\n        this.isFetchingOptimistic = false;\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.dispatch({\n          type: 'failed',\n          failureCount,\n          error\n        });\n      },\n      onPause: () => {\n        this.dispatch({\n          type: 'pause'\n        });\n      },\n      onContinue: () => {\n        this.dispatch({\n          type: 'continue'\n        });\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode\n    });\n    this.promise = this.retryer.promise;\n    return this.promise;\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      var _action$meta, _action$dataUpdatedAt;\n\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            fetchStatus: 'paused'\n          };\n\n        case 'continue':\n          return { ...state,\n            fetchStatus: 'fetching'\n          };\n\n        case 'fetch':\n          return { ...state,\n            fetchFailureCount: 0,\n            fetchFailureReason: null,\n            fetchMeta: (_action$meta = action.meta) != null ? _action$meta : null,\n            fetchStatus: canFetch(this.options.networkMode) ? 'fetching' : 'paused',\n            ...(!state.dataUpdatedAt && {\n              error: null,\n              status: 'loading'\n            })\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) != null ? _action$dataUpdatedAt : Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null\n            })\n          };\n\n        case 'error':\n          const error = action.error;\n\n          if (isCancelledError(error) && error.revert && this.revertState) {\n            return { ...this.revertState\n            };\n          }\n\n          return { ...state,\n            error: error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error'\n          };\n\n        case 'invalidate':\n          return { ...state,\n            isInvalidated: true\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action);\n      });\n      this.cache.notify({\n        query: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\n\nfunction getDefaultState(options) {\n  const data = typeof options.initialData === 'function' ? options.initialData() : options.initialData;\n  const hasData = typeof data !== 'undefined';\n  const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === 'function' ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'loading',\n    fetchStatus: 'idle'\n  };\n}\n\nexport { Query };\n//# sourceMappingURL=query.mjs.map\n","import { hashQueryKeyByOptions, parseFilterArgs, matchQuery } from './utils.mjs';\nimport { Query } from './query.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nclass QueryCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.queries = [];\n    this.queriesMap = {};\n  }\n\n  build(client, options, state) {\n    var _options$queryHash;\n\n    const queryKey = options.queryKey;\n    const queryHash = (_options$queryHash = options.queryHash) != null ? _options$queryHash : hashQueryKeyByOptions(queryKey, options);\n    let query = this.get(queryHash);\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        logger: client.getLogger(),\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey)\n      });\n      this.add(query);\n    }\n\n    return query;\n  }\n\n  add(query) {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query;\n      this.queries.push(query);\n      this.notify({\n        type: 'added',\n        query\n      });\n    }\n  }\n\n  remove(query) {\n    const queryInMap = this.queriesMap[query.queryHash];\n\n    if (queryInMap) {\n      query.destroy();\n      this.queries = this.queries.filter(x => x !== query);\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash];\n      }\n\n      this.notify({\n        type: 'removed',\n        query\n      });\n    }\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query);\n      });\n    });\n  }\n\n  get(queryHash) {\n    return this.queriesMap[queryHash];\n  }\n\n  getAll() {\n    return this.queries;\n  }\n\n  find(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.queries.find(query => matchQuery(filters, query));\n  }\n\n  findAll(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    return Object.keys(filters).length > 0 ? this.queries.filter(query => matchQuery(filters, query)) : this.queries;\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  onFocus() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus();\n      });\n    });\n  }\n\n  onOnline() {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline();\n      });\n    });\n  }\n\n}\n\nexport { QueryCache };\n//# sourceMappingURL=queryCache.mjs.map\n","import { defaultLogger } from './logger.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Removable } from './removable.mjs';\nimport { createRetryer, canFetch } from './retryer.mjs';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.options = { ...config.defaultOptions,\n      ...config.options\n    };\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.updateCacheTime(this.options.cacheTime);\n    this.scheduleGc();\n  }\n\n  get meta() {\n    return this.options.meta;\n  }\n\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n\n  addObserver(observer) {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n\n  continue() {\n    if (this.retryer) {\n      this.retryer.continue();\n      return this.retryer.promise;\n    }\n\n    return this.execute();\n  }\n\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({\n            type: 'failed',\n            failureCount,\n            error\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n\n    const restored = this.state.status === 'loading';\n\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$options$onSettl, _this$options3;\n\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onError, _this$options4, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, error, this.state.variables, this.state.context, this));\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return { ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n\n        case 'pause':\n          return { ...state,\n            isPaused: true\n          };\n\n        case 'continue':\n          return { ...state,\n            isPaused: false\n          };\n\n        case 'loading':\n          return { ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n\n        case 'success':\n          return { ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n\n        case 'error':\n          return { ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error'\n          };\n\n        case 'setState':\n          return { ...state,\n            ...action.state\n          };\n      }\n    };\n\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\n\nexport { Mutation, getDefaultState };\n//# sourceMappingURL=mutation.mjs.map\n","import { notifyManager } from './notifyManager.mjs';\nimport { Mutation } from './mutation.mjs';\nimport { matchMutation, noop } from './utils.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\n// CLASS\nclass MutationCache extends Subscribable {\n  constructor(config) {\n    super();\n    this.config = config || {};\n    this.mutations = [];\n    this.mutationId = 0;\n  }\n\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      logger: client.getLogger(),\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey ? client.getMutationDefaults(options.mutationKey) : undefined\n    });\n    this.add(mutation);\n    return mutation;\n  }\n\n  add(mutation) {\n    this.mutations.push(mutation);\n    this.notify({\n      type: 'added',\n      mutation\n    });\n  }\n\n  remove(mutation) {\n    this.mutations = this.mutations.filter(x => x !== mutation);\n    this.notify({\n      type: 'removed',\n      mutation\n    });\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n\n  getAll() {\n    return this.mutations;\n  }\n\n  find(filters) {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true;\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation));\n  }\n\n  findAll(filters) {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation));\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  resumePausedMutations() {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused);\n    return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n  }\n\n}\n\nexport { MutationCache };\n//# sourceMappingURL=mutationCache.mjs.map\n","function infiniteQueryBehavior() {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        const refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        const fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        const pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        const isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        const isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        const oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        const oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        let newPageParams = oldPageParams;\n        let cancelled = false;\n\n        const addSignalProperty = object => {\n          Object.defineProperty(object, 'signal', {\n            enumerable: true,\n            get: () => {\n              var _context$signal;\n\n              if ((_context$signal = context.signal) != null && _context$signal.aborted) {\n                cancelled = true;\n              } else {\n                var _context$signal2;\n\n                (_context$signal2 = context.signal) == null ? void 0 : _context$signal2.addEventListener('abort', () => {\n                  cancelled = true;\n                });\n              }\n\n              return context.signal;\n            }\n          });\n        }; // Get query function\n\n\n        const queryFn = context.options.queryFn || (() => Promise.reject('Missing queryFn'));\n\n        const buildNewPages = (pages, param, page, previous) => {\n          newPageParams = previous ? [param, ...newPageParams] : [...newPageParams, param];\n          return previous ? [page, ...pages] : [...pages, page];\n        }; // Create function to fetch a page\n\n\n        const fetchPage = (pages, manual, param, previous) => {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          const queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n            meta: context.options.meta\n          };\n          addSignalProperty(queryFnContext);\n          const queryFnResult = queryFn(queryFnContext);\n          const promise = Promise.resolve(queryFnResult).then(page => buildNewPages(pages, param, page, previous));\n          return promise;\n        };\n\n        let promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined';\n          const param = manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param, true);\n        } // Refetch pages\n        else {\n          newPageParams = [];\n          const manual = typeof context.options.getNextPageParam === 'undefined';\n          const shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n          promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n              if (shouldFetchNextPage) {\n                const param = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n                return fetchPage(pages, manual, param);\n              }\n\n              return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n            });\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams\n        }));\n        return finalPromise;\n      };\n    }\n  };\n}\nfunction getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nfunction getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n\n  return;\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nfunction hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n\n  return;\n}\n\nexport { getNextPageParam, getPreviousPageParam, hasNextPage, hasPreviousPage, infiniteQueryBehavior };\n//# sourceMappingURL=infiniteQueryBehavior.mjs.map\n","import { shallowEqualObjects, noop, isServer, isValidTimeout, timeUntilStale, replaceData } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { canFetch, isCancelledError } from './retryer.mjs';\n\nclass QueryObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.options = options;\n    this.trackedProps = new Set();\n    this.selectError = null;\n    this.bindMethods();\n    this.setOptions(options);\n  }\n\n  bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  shouldFetchOnReconnect() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnReconnect);\n  }\n\n  shouldFetchOnWindowFocus() {\n    return shouldFetchOn(this.currentQuery, this.options, this.options.refetchOnWindowFocus);\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n    this.currentQuery.removeObserver(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    const prevOptions = this.options;\n    const prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryOptions(options);\n\n    if (process.env.NODE_ENV !== 'production' && typeof (options == null ? void 0 : options.isDataEqual) !== 'undefined') {\n      this.client.getLogger().error(\"The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option\");\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this\n      });\n    }\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    const mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval(); // Update refetch interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || nextRefetchInterval !== this.currentRefetchInterval)) {\n      this.updateRefetchInterval(nextRefetchInterval);\n    }\n  }\n\n  getOptimisticResult(options) {\n    const query = this.client.getQueryCache().build(this.client, options);\n    return this.createResult(query, options);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  trackResult(result) {\n    const trackedResult = {};\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key);\n          return result[key];\n        }\n      });\n    });\n    return trackedResult;\n  }\n\n  getCurrentQuery() {\n    return this.currentQuery;\n  }\n\n  remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  }\n\n  refetch({\n    refetchPage,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        refetchPage\n      }\n    });\n  }\n\n  fetchOptimistic(options) {\n    const defaultedOptions = this.client.defaultQueryOptions(options);\n    const query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    query.isFetchingOptimistic = true;\n    return query.fetch().then(() => this.createResult(query, defaultedOptions));\n  }\n\n  fetch(fetchOptions) {\n    var _fetchOptions$cancelR;\n\n    return this.executeFetch({ ...fetchOptions,\n      cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) != null ? _fetchOptions$cancelR : true\n    }).then(() => {\n      this.updateResult();\n      return this.currentResult;\n    });\n  }\n\n  executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    let promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions != null && fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  updateStaleTimeout() {\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    const time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    const timeout = time + 1;\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult();\n      }\n    }, timeout);\n  }\n\n  computeRefetchInterval() {\n    var _this$options$refetch;\n\n    return typeof this.options.refetchInterval === 'function' ? this.options.refetchInterval(this.currentResult.data, this.currentQuery) : (_this$options$refetch = this.options.refetchInterval) != null ? _this$options$refetch : false;\n  }\n\n  updateRefetchInterval(nextInterval) {\n    this.clearRefetchInterval();\n    this.currentRefetchInterval = nextInterval;\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.currentRefetchInterval) || this.currentRefetchInterval === 0) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        this.executeFetch();\n      }\n    }, this.currentRefetchInterval);\n  }\n\n  updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval(this.computeRefetchInterval());\n  }\n\n  clearStaleTimeout() {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId);\n      this.staleTimeoutId = undefined;\n    }\n  }\n\n  clearRefetchInterval() {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId);\n      this.refetchIntervalId = undefined;\n    }\n  }\n\n  createResult(query, options) {\n    const prevQuery = this.currentQuery;\n    const prevOptions = this.options;\n    const prevResult = this.currentResult;\n    const prevResultState = this.currentResultState;\n    const prevResultOptions = this.currentResultOptions;\n    const queryChange = query !== prevQuery;\n    const queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    const prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    const {\n      state\n    } = query;\n    let {\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      fetchStatus,\n      status\n    } = state;\n    let isPreviousData = false;\n    let isPlaceholderData = false;\n    let data; // Optimistically set result in fetching state if needed\n\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners();\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode) ? 'fetching' : 'paused';\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle';\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdatedAt && prevQueryResult != null && prevQueryResult.isSuccess && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === this.selectFn) {\n        data = this.selectResult;\n      } else {\n        try {\n          this.selectFn = options.select;\n          data = options.select(state.data);\n          data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);\n          this.selectResult = data;\n          this.selectError = null;\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError);\n          }\n\n          this.selectError = selectError;\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && status === 'loading') {\n      let placeholderData; // Memoize placeholder data\n\n      if (prevResult != null && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n            this.selectError = null;\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError);\n            }\n\n            this.selectError = selectError;\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = replaceData(prevResult == null ? void 0 : prevResult.data, placeholderData, options);\n        isPlaceholderData = true;\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError;\n      data = this.selectResult;\n      errorUpdatedAt = Date.now();\n      status = 'error';\n    }\n\n    const isFetching = fetchStatus === 'fetching';\n    const isLoading = status === 'loading';\n    const isError = status === 'error';\n    const result = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  }\n\n  updateResult(notifyOptions) {\n    const prevResult = this.currentResult;\n    const nextResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify and update result if something has changed\n\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return;\n    }\n\n    this.currentResult = nextResult; // Determine which callbacks to trigger\n\n    const defaultNotifyOptions = {\n      cache: true\n    };\n\n    const shouldNotifyListeners = () => {\n      if (!prevResult) {\n        return true;\n      }\n\n      const {\n        notifyOnChangeProps\n      } = this.options;\n\n      if (notifyOnChangeProps === 'all' || !notifyOnChangeProps && !this.trackedProps.size) {\n        return true;\n      }\n\n      const includedProps = new Set(notifyOnChangeProps != null ? notifyOnChangeProps : this.trackedProps);\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error');\n      }\n\n      return Object.keys(this.currentResult).some(key => {\n        const typedKey = key;\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey];\n        return changed && includedProps.has(typedKey);\n      });\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify({ ...defaultNotifyOptions,\n      ...notifyOptions\n    });\n  }\n\n  updateQuery() {\n    const query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    const prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  }\n\n  onQueryUpdate(action) {\n    const notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  }\n\n  notify(notifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        var _this$options$onSucce, _this$options, _this$options$onSettl, _this$options2;\n\n        (_this$options$onSucce = (_this$options = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options, this.currentResult.data);\n        (_this$options$onSettl = (_this$options2 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options2, this.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        var _this$options$onError, _this$options3, _this$options$onSettl2, _this$options4;\n\n        (_this$options$onError = (_this$options3 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options3, this.currentResult.error);\n        (_this$options$onSettl2 = (_this$options4 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options4, undefined, this.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  }\n\n}\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.dataUpdatedAt > 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\n\nfunction shouldFetchOn(query, options, field) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field;\n    return value === 'always' || value !== false && isStale(query, options);\n  }\n\n  return false;\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (!options.suspense || query.state.status !== 'error') && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}\n\nexport { QueryObserver };\n//# sourceMappingURL=queryObserver.mjs.map\n","import { difference, replaceAt } from './utils.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { QueryObserver } from './queryObserver.mjs';\nimport { Subscribable } from './subscribable.mjs';\n\nclass QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n\n  destroy() {\n    this.listeners = [];\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n\n      if (!this.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n\n  getCurrentResult() {\n    return this.result;\n  }\n\n  getQueries() {\n    return this.observers.map(observer => observer.getCurrentQuery());\n  }\n\n  getObservers() {\n    return this.observers;\n  }\n\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObservers.find(observer => observer.options.queryHash === defaultedOptions.queryHash);\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    const matchedQueryHashes = matchingObservers.map(match => match.defaultedQueryOptions.queryHash);\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.includes(defaultedOptions.queryHash));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObservers.some(match => match.observer === prevObserver));\n\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result);\n      });\n    });\n  }\n\n}\n\nexport { QueriesObserver };\n//# sourceMappingURL=queriesObserver.mjs.map\n","import { QueryObserver } from './queryObserver.mjs';\nimport { infiniteQueryBehavior, hasNextPage, hasPreviousPage } from './infiniteQueryBehavior.mjs';\n\nclass InfiniteQueryObserver extends QueryObserver {\n  // Type override\n  // Type override\n  // Type override\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(client, options) {\n    super(client, options);\n  }\n\n  bindMethods() {\n    super.bindMethods();\n    this.fetchNextPage = this.fetchNextPage.bind(this);\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this);\n  }\n\n  setOptions(options, notifyOptions) {\n    super.setOptions({ ...options,\n      behavior: infiniteQueryBehavior()\n    }, notifyOptions);\n  }\n\n  getOptimisticResult(options) {\n    options.behavior = infiniteQueryBehavior();\n    return super.getOptimisticResult(options);\n  }\n\n  fetchNextPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'forward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  fetchPreviousPage({\n    pageParam,\n    ...options\n  } = {}) {\n    return this.fetch({ ...options,\n      meta: {\n        fetchMore: {\n          direction: 'backward',\n          pageParam\n        }\n      }\n    });\n  }\n\n  createResult(query, options) {\n    var _state$fetchMeta, _state$fetchMeta$fetc, _state$fetchMeta2, _state$fetchMeta2$fet, _state$data, _state$data2;\n\n    const {\n      state\n    } = query;\n    const result = super.createResult(query, options);\n    const {\n      isFetching,\n      isRefetching\n    } = result;\n    const isFetchingNextPage = isFetching && ((_state$fetchMeta = state.fetchMeta) == null ? void 0 : (_state$fetchMeta$fetc = _state$fetchMeta.fetchMore) == null ? void 0 : _state$fetchMeta$fetc.direction) === 'forward';\n    const isFetchingPreviousPage = isFetching && ((_state$fetchMeta2 = state.fetchMeta) == null ? void 0 : (_state$fetchMeta2$fet = _state$fetchMeta2.fetchMore) == null ? void 0 : _state$fetchMeta2$fet.direction) === 'backward';\n    return { ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, (_state$data = state.data) == null ? void 0 : _state$data.pages),\n      hasPreviousPage: hasPreviousPage(options, (_state$data2 = state.data) == null ? void 0 : _state$data2.pages),\n      isFetchingNextPage,\n      isFetchingPreviousPage,\n      isRefetching: isRefetching && !isFetchingNextPage && !isFetchingPreviousPage\n    };\n  }\n\n}\n\nexport { InfiniteQueryObserver };\n//# sourceMappingURL=infiniteQueryObserver.mjs.map\n","import { getDefaultState } from './mutation.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { Subscribable } from './subscribable.mjs';\nimport { shallowEqualObjects } from './utils.mjs';\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  setOptions(options) {\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      var _this$currentMutation;\n\n      (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.removeObserver(this);\n    }\n  }\n\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n\n    this.notify(notifyOptions);\n  }\n\n  getCurrentResult() {\n    return this.currentResult;\n  }\n\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n\n  mutate(variables, options) {\n    this.mutateOptions = options;\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, { ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = { ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n\n}\n\nexport { MutationObserver };\n//# sourceMappingURL=mutationObserver.mjs.map\n","// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\nfunction dehydrate(client, options = {}) {\n  const mutations = [];\n  const queries = [];\n\n  if (options.dehydrateMutations !== false) {\n    const shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(mutation => {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (options.dehydrateQueries !== false) {\n    const shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(query => {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache(); // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const mutations = dehydratedState.mutations || []; // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(dehydratedMutation => {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations),\n      mutationKey: dehydratedMutation.mutationKey\n    }, dehydratedMutation.state);\n  });\n  queries.forEach(dehydratedQuery => {\n    var _options$defaultOptio2;\n\n    const query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, { ...(options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries),\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }, dehydratedQuery.state);\n  });\n}\n\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };\n//# sourceMappingURL=hydration.mjs.map\n","import * as ReactDOM from 'react-dom'\nexport const unstable_batchedUpdates = ReactDOM.unstable_batchedUpdates\n","import { notifyManager } from '@tanstack/query-core'\nimport { unstable_batchedUpdates } from './reactBatchedUpdates'\n\nnotifyManager.setBatchNotifyFunction(unstable_batchedUpdates)\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\n\ndeclare global {\n  interface Window {\n    ReactQueryClientContext?: React.Context<QueryClient | undefined>\n  }\n}\n\nexport const defaultContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\nconst QueryClientSharingContext = React.createContext<boolean>(false)\n\n// If we are given a context, we will use it.\n// Otherwise, if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\nfunction getQueryClientContext(\n  context: React.Context<QueryClient | undefined> | undefined,\n  contextSharing: boolean,\n) {\n  if (context) {\n    return context\n  }\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext\n    }\n\n    return window.ReactQueryClientContext\n  }\n\n  return defaultContext\n}\n\nexport const useQueryClient = ({ context }: ContextOptions = {}) => {\n  const queryClient = React.useContext(\n    getQueryClientContext(context, React.useContext(QueryClientSharingContext)),\n  )\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return queryClient\n}\n\ntype QueryClientProviderPropsBase = {\n  client: QueryClient\n  children?: React.ReactNode\n}\ntype QueryClientProviderPropsWithContext = ContextOptions & {\n  contextSharing?: never\n} & QueryClientProviderPropsBase\ntype QueryClientProviderPropsWithContextSharing = {\n  context?: never\n  contextSharing?: boolean\n} & QueryClientProviderPropsBase\n\nexport type QueryClientProviderProps =\n  | QueryClientProviderPropsWithContext\n  | QueryClientProviderPropsWithContextSharing\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n  context,\n  contextSharing = false,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  if (process.env.NODE_ENV !== 'production' && contextSharing) {\n    client\n      .getLogger()\n      .error(\n        `The contextSharing option has been deprecated and will be removed in the next major version`,\n      )\n  }\n\n  const Context = getQueryClientContext(context, contextSharing)\n\n  return (\n    <QueryClientSharingContext.Provider value={!context && contextSharing}>\n      <Context.Provider value={client}>{children}</Context.Provider>\n    </QueryClientSharingContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","'use client'\nimport * as React from 'react'\n\nimport type { HydrateOptions } from '@tanstack/query-core'\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {},\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationFunction, MutationKey } from '@tanstack/query-core'\nimport {\n  notifyManager,\n  parseMutationArgs,\n  MutationObserver,\n} from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  UseMutateFunction,\n  UseMutationOptions,\n  UseMutationResult,\n} from './types'\nimport { shouldThrowError } from './utils'\n\n// HOOK\n\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  options: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationKey: MutationKey,\n  mutationFn?: MutationFunction<TData, TVariables>,\n  options?: Omit<\n    UseMutationOptions<TData, TError, TVariables, TContext>,\n    'mutationKey' | 'mutationFn'\n  >,\n): UseMutationResult<TData, TError, TVariables, TContext>\nexport function useMutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  arg1:\n    | MutationKey\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg2?:\n    | MutationFunction<TData, TVariables>\n    | UseMutationOptions<TData, TError, TVariables, TContext>,\n  arg3?: UseMutationOptions<TData, TError, TVariables, TContext>,\n): UseMutationResult<TData, TError, TVariables, TContext> {\n  const options = parseMutationArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n\n  const [observer] = React.useState(\n    () =>\n      new MutationObserver<TData, TError, TVariables, TContext>(\n        queryClient,\n        options,\n      ),\n  )\n\n  React.useEffect(() => {\n    observer.setOptions(options)\n  }, [observer, options])\n\n  const result = useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  const mutate = React.useCallback<\n    UseMutateFunction<TData, TError, TVariables, TContext>\n  >(\n    (variables, mutateOptions) => {\n      observer.mutate(variables, mutateOptions).catch(noop)\n    },\n    [observer],\n  )\n\n  if (\n    result.error &&\n    shouldThrowError(observer.options.useErrorBoundary, [result.error])\n  ) {\n    throw result.error\n  }\n\n  return { ...result, mutate, mutateAsync: result.mutate }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n","import { parseFilterArgs, parseQueryArgs, functionalUpdate, noop, hashQueryKey, partialMatchKey, hashQueryKeyByOptions } from './utils.mjs';\nimport { QueryCache } from './queryCache.mjs';\nimport { MutationCache } from './mutationCache.mjs';\nimport { focusManager } from './focusManager.mjs';\nimport { onlineManager } from './onlineManager.mjs';\nimport { notifyManager } from './notifyManager.mjs';\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior.mjs';\nimport { defaultLogger } from './logger.mjs';\n\n// CLASS\nclass QueryClient {\n  constructor(config = {}) {\n    this.queryCache = config.queryCache || new QueryCache();\n    this.mutationCache = config.mutationCache || new MutationCache();\n    this.logger = config.logger || defaultLogger;\n    this.defaultOptions = config.defaultOptions || {};\n    this.queryDefaults = [];\n    this.mutationDefaults = [];\n    this.mountCount = 0;\n\n    if (process.env.NODE_ENV !== 'production' && config.logger) {\n      this.logger.error(\"Passing a custom logger has been deprecated and will be removed in the next major version.\");\n    }\n  }\n\n  mount() {\n    this.mountCount++;\n    if (this.mountCount !== 1) return;\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused()) {\n        this.resumePausedMutations();\n        this.queryCache.onFocus();\n      }\n    });\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (onlineManager.isOnline()) {\n        this.resumePausedMutations();\n        this.queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    var _this$unsubscribeFocu, _this$unsubscribeOnli;\n\n    this.mountCount--;\n    if (this.mountCount !== 0) return;\n    (_this$unsubscribeFocu = this.unsubscribeFocus) == null ? void 0 : _this$unsubscribeFocu.call(this);\n    this.unsubscribeFocus = undefined;\n    (_this$unsubscribeOnli = this.unsubscribeOnline) == null ? void 0 : _this$unsubscribeOnli.call(this);\n    this.unsubscribeOnline = undefined;\n  }\n\n  isFetching(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    filters.fetchStatus = 'fetching';\n    return this.queryCache.findAll(filters).length;\n  }\n\n  isMutating(filters) {\n    return this.mutationCache.findAll({ ...filters,\n      fetching: true\n    }).length;\n  }\n\n  getQueryData(queryKey, filters) {\n    var _this$queryCache$find;\n\n    return (_this$queryCache$find = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find.state.data;\n  }\n\n  ensureQueryData(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const cachedData = this.getQueryData(parsedOptions.queryKey);\n    return cachedData ? Promise.resolve(cachedData) : this.fetchQuery(parsedOptions);\n  }\n\n  getQueriesData(queryKeyOrFilters) {\n    return this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey,\n      state\n    }) => {\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const query = this.queryCache.find(queryKey);\n    const prevData = query == null ? void 0 : query.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (typeof data === 'undefined') {\n      return undefined;\n    }\n\n    const parsedOptions = parseQueryArgs(queryKey);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions);\n    return this.queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(queryKeyOrFilters, updater, options) {\n    return notifyManager.batch(() => this.getQueryCache().findAll(queryKeyOrFilters).map(({\n      queryKey\n    }) => [queryKey, this.setQueryData(queryKey, updater, options)]));\n  }\n\n  getQueryState(queryKey, filters) {\n    var _this$queryCache$find2;\n\n    return (_this$queryCache$find2 = this.queryCache.find(queryKey, filters)) == null ? void 0 : _this$queryCache$find2.state;\n  }\n\n  removeQueries(arg1, arg2) {\n    const [filters] = parseFilterArgs(arg1, arg2);\n    const queryCache = this.queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const queryCache = this.queryCache;\n    const refetchFilters = {\n      type: 'active',\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries(arg1, arg2, arg3) {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3);\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true;\n    }\n\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    return notifyManager.batch(() => {\n      var _ref, _filters$refetchType;\n\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: (_ref = (_filters$refetchType = filters.refetchType) != null ? _filters$refetchType : filters.type) != null ? _ref : 'active'\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries(arg1, arg2, arg3) {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3);\n    const promises = notifyManager.batch(() => this.queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      var _options$cancelRefetc;\n\n      return query.fetch(undefined, { ...options,\n        cancelRefetch: (_options$cancelRefetc = options == null ? void 0 : options.cancelRefetch) != null ? _options$cancelRefetc : true,\n        meta: {\n          refetchPage: filters.refetchPage\n        }\n      });\n    }));\n    let promise = Promise.all(promises).then(noop);\n\n    if (!(options != null && options.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  }\n\n  fetchQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions); // https://github.com/tannerlinsley/react-query/issues/652\n\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(arg1, arg2, arg3) {\n    return this.fetchQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    parsedOptions.behavior = infiniteQueryBehavior();\n    return this.fetchQuery(parsedOptions);\n  }\n\n  prefetchInfiniteQuery(arg1, arg2, arg3) {\n    return this.fetchInfiniteQuery(arg1, arg2, arg3).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    return this.mutationCache.resumePausedMutations();\n  }\n\n  getQueryCache() {\n    return this.queryCache;\n  }\n\n  getMutationCache() {\n    return this.mutationCache;\n  }\n\n  getLogger() {\n    return this.logger;\n  }\n\n  getDefaultOptions() {\n    return this.defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    const result = this.queryDefaults.find(x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.queryDefaults.push({\n        queryKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getQueryDefaults(queryKey) {\n    if (!queryKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.queryDefaults.filter(x => partialMatchKey(queryKey, x.queryKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several query defaults match with key '\" + JSON.stringify(queryKey) + \"'. The first matching query defaults are used. Please check how query defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetquerydefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    const result = this.mutationDefaults.find(x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey));\n\n    if (result) {\n      result.defaultOptions = options;\n    } else {\n      this.mutationDefaults.push({\n        mutationKey,\n        defaultOptions: options\n      });\n    }\n  }\n\n  getMutationDefaults(mutationKey) {\n    if (!mutationKey) {\n      return undefined;\n    } // Get the first matching defaults\n\n\n    const firstMatchingDefaults = this.mutationDefaults.find(x => partialMatchKey(mutationKey, x.mutationKey)); // Additional checks and error in dev mode\n\n    if (process.env.NODE_ENV !== 'production') {\n      // Retrieve all matching defaults for the given key\n      const matchingDefaults = this.mutationDefaults.filter(x => partialMatchKey(mutationKey, x.mutationKey)); // It is ok not having defaults, but it is error prone to have more than 1 default for a given key\n\n      if (matchingDefaults.length > 1) {\n        this.logger.error(\"[QueryClient] Several mutation defaults match with key '\" + JSON.stringify(mutationKey) + \"'. The first matching mutation defaults are used. Please check how mutation defaults are registered. Order does matter here. cf. https://react-query.tanstack.com/reference/QueryClient#queryclientsetmutationdefaults.\");\n      }\n    }\n\n    return firstMatchingDefaults == null ? void 0 : firstMatchingDefaults.defaultOptions;\n  }\n\n  defaultQueryOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options == null ? void 0 : options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    } // dependent default values\n\n\n    if (typeof defaultedOptions.refetchOnReconnect === 'undefined') {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== 'always';\n    }\n\n    if (typeof defaultedOptions.useErrorBoundary === 'undefined') {\n      defaultedOptions.useErrorBoundary = !!defaultedOptions.suspense;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options != null && options._defaulted) {\n      return options;\n    }\n\n    return { ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options == null ? void 0 : options.mutationKey),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.queryCache.clear();\n    this.mutationCache.clear();\n  }\n\n}\n\nexport { QueryClient };\n//# sourceMappingURL=queryClient.mjs.map\n","import type {\n  QueryObserver,\n  QueryFunction,\n  QueryKey,\n} from '@tanstack/query-core'\nimport { InfiniteQueryObserver, parseQueryArgs } from '@tanstack/query-core'\nimport type { UseInfiniteQueryOptions, UseInfiniteQueryResult } from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryFnData,\n      TQueryKey\n    >,\n    'queryKey' | 'queryFn'\n  >,\n): UseInfiniteQueryResult<TData, TError>\nexport function useInfiniteQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1:\n    | TQueryKey\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseInfiniteQueryOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryFnData,\n        TQueryKey\n      >,\n  arg3?: UseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey\n  >,\n): UseInfiniteQueryResult<TData, TError> {\n  const options = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(\n    options,\n    InfiniteQueryObserver as typeof QueryObserver,\n  ) as UseInfiniteQueryResult<TData, TError>\n}\n","import * as React from 'react'\nimport type { QueryKey, QueryFilters } from '@tanstack/query-core'\nimport { notifyManager, parseFilterArgs } from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { MutationKey, MutationFilters } from '@tanstack/query-core'\nimport { notifyManager, parseMutationFilterArgs } from '@tanstack/query-core'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsMutating(\n  filters?: MutationFilters,\n  options?: Options,\n): number\nexport function useIsMutating(\n  mutationKey?: MutationKey,\n  filters?: Omit<MutationFilters, 'mutationKey'>,\n  options?: Options,\n): number\nexport function useIsMutating(\n  arg1?: MutationKey | MutationFilters,\n  arg2?: Omit<MutationFilters, 'mutationKey'> | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseMutationFilterArgs(arg1, arg2, arg3)\n\n  const queryClient = useQueryClient({ context: options.context })\n  const mutationCache = queryClient.getMutationCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        mutationCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [mutationCache],\n    ),\n    () => queryClient.isMutating(filters),\n    () => queryClient.isMutating(filters),\n  )\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryFunction } from '@tanstack/query-core'\nimport { notifyManager, QueriesObserver } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureStaleTime,\n  shouldSuspend,\n  fetchOptimistic,\n  willFetch,\n} from './suspense'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const optimisticResult = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  defaultedQueries.forEach((query) => {\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n    ensureStaleTime(query)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result, isRestoring),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const options = defaultedQueries[index]\n        const queryObserver = observer.getObservers()[index]\n\n        if (options && queryObserver) {\n          if (shouldSuspend(options, result, isRestoring)) {\n            return fetchOptimistic(options, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(options, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) =>\n      getHasError({\n        result,\n        errorResetBoundary,\n        useErrorBoundary: defaultedQueries[index]?.useErrorBoundary ?? false,\n        query: observer.getQueries()[index]!,\n      }),\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return optimisticResult as QueriesResults<T>\n}\n","import type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n"],"names":["Subscribable","constructor","this","listeners","subscribe","bind","listener","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","isServer","window","noop","isValidTimeout","value","Infinity","difference","array1","array2","indexOf","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseMutationArgs","mutationKey","mutationFn","parseFilterArgs","parseMutationFilterArgs","matchQuery","filters","query","type","exact","fetchStatus","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","state","matchMutation","mutation","fetching","hashQueryKey","status","queryKeyHashFn","JSON","stringify","_","val","isPlainObject","Object","keys","sort","reduce","result","key","a","b","partialDeepEqual","some","replaceEqualDeep","array","isPlainArray","aSize","bItems","bSize","copy","equalItems","i","shallowEqualObjects","Array","isArray","o","hasObjectPrototype","ctor","prot","prototype","hasOwnProperty","toString","call","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","callback","then","replaceData","prevData","data","isDataEqual","structuralSharing","focusManager","super","setup","onFocus","addEventListener","removeEventListener","cleanup","setEventListener","_this$cleanup","undefined","_this$cleanup2","focused","setFocused","forEach","isFocused","document","includes","visibilityState","onlineManager","onOnline","online","setOnline","isOnline","navigator","onLine","defaultRetryDelay","failureCount","min","canFetch","networkMode","CancelledError","revert","silent","isCancelledError","createRetryer","config","continueFn","promiseResolve","promiseReject","isRetryCancelled","isResolved","promise","outerResolve","outerReject","shouldPause","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","error","catch","_config$retry","_config$retryDelay","retry","retryDelay","delay","shouldRetry","onFail","cancel","cancelOptions","abort","continue","cancelRetry","continueRetry","defaultLogger","console","notifyManager","queue","transactions","notifyFn","batchNotifyFn","schedule","flush","originalQueue","batch","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","createNotifyManager","Removable","destroy","clearGcTimeout","scheduleGc","cacheTime","gcTimeout","optionalRemove","updateCacheTime","newCacheTime","clearTimeout","Query","abortSignalConsumed","defaultOptions","setOptions","observers","cache","logger","initialState","initialData","hasData","initialDataUpdatedAt","dataUpdateCount","dataUpdatedAt","errorUpdateCount","errorUpdatedAt","fetchFailureCount","fetchFailureReason","fetchMeta","isInvalidated","getDefaultState","meta","remove","setData","newData","dispatch","manual","setState","setStateOptions","_this$retryer","retryer","reset","observer","enabled","isDisabled","getObserversCount","getCurrentResult","isStaleByTime","_this$retryer2","find","shouldFetchOnWindowFocus","refetch","cancelRefetch","_this$retryer3","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","_this$options$behavio","_context$fetchOptions","_this$retryer4","abortController","AbortController","getAbortController","queryFnContext","pageParam","addSignalProperty","object","defineProperty","enumerable","get","signal","context","fetchFn","_context$fetchOptions2","behavior","onFetch","revertState","_this$cache$config$on","_this$cache$config","isFetchingOptimistic","_this$cache$config$on2","_this$cache$config2","Error","action","_action$meta","_action$dataUpdatedAt","reducer","onQueryUpdate","QueryCache","queries","queriesMap","build","client","_options$queryHash","getLogger","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","async","executeMutation","_this$options$retry","variables","restored","_this$mutationCache$c3","_this$mutationCache$c4","_this$options$onSucce","_this$options2","_this$options$onSettl","_this$options3","_this$mutationCache$c","_this$mutationCache$c2","_this$options$onMutat","_this$options","onMutate","onSettled","_this$mutationCache$c5","_this$mutationCache$c6","_this$options$onError","_this$options4","_this$options$onSettl2","_this$options5","failureReason","isPaused","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","buildNewPages","param","page","previous","fetchPage","_context$signal","_context$signal2","aborted","queryFnResult","getNextPageParam","getPreviousPageParam","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryObserver","trackedProps","Set","selectError","bindMethods","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","shouldFetchOn","refetchOnReconnect","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","notifyOptions","prevOptions","prevQuery","getQueryCache","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","configurable","getCurrentQuery","fetchOptimistic","defaultedOptions","_fetchOptions$cancelR","throwOnError","staleTimeoutId","_this$options$refetch","refetchInterval","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectFn","selectResult","placeholderData","isFetching","isLoading","isError","isInitialLoading","isFetched","isFetchedAfterMount","isRefetching","isLoadingError","isRefetchError","nextResult","defaultNotifyOptions","notifyOnChangeProps","size","includedProps","useErrorBoundary","typedKey","has","shouldNotifyListeners","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","QueriesObserver","observersMap","setQueries","onUpdate","prevObservers","newObserverMatches","findMatchingObservers","match","defaultedQueryOptions","newObservers","map","newObserversMap","fromEntries","newResult","hasIndexChange","index","getQueries","getObservers","matchingObservers","flatMap","matchedQueryHashes","unmatchedQueries","unmatchedObservers","prevObserver","getObserver","currentObserver","newOrReusedObservers","previouslyUsedObserver","concat","slice","replaceAt","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","_state$fetchMeta","_state$fetchMeta$fetc","_state$fetchMeta2","_state$fetchMeta2$fet","_state$data","_state$data2","MutationObserver","mutate","getMutationCache","currentMutation","_this$currentMutation","mutateOptions","isIdle","_this$mutateOptions$o","_this$mutateOptions","_this$mutateOptions$o2","_this$mutateOptions2","_this$mutateOptions$o3","_this$mutateOptions3","_this$mutateOptions$o4","_this$mutateOptions4","defaultShouldDehydrateMutation","defaultShouldDehydrateQuery","hydrate","dehydratedState","queryCache","dehydratedMutation","_options$defaultOptio","dehydratedQuery","_options$defaultOptio2","unstable_batchedUpdates","ReactDOM","module","exports","e","require$$0","k","is","l","useState","m","useEffect","n","useLayoutEffect","p","useDebugValue","r","getSnapshot","d","f","u","createElement","inst","c","g","useSyncExternalStoreShim_production_min","useSyncExternalStore","uSES","defaultContext","React","createContext","QueryClientSharingContext","getQueryClientContext","contextSharing","ReactQueryClientContext","useQueryClient","queryClient","useContext","IsRestoringContext","useIsRestoring","IsRestoringProvider","Provider","createValue","isReset","clearReset","QueryErrorResetBoundaryContext","useQueryErrorResetBoundary","shouldThrowError","_useErrorBoundary","params","ensurePreventErrorBoundaryRetry","errorResetBoundary","useClearResetErrorBoundary","getHasError","ensureStaleTime","willFetch","isRestoring","shouldSuspend","useBaseQuery","Observer","useCallback","onStoreChange","useHydrate","optionsRef","useRef","current","useMemo","children","queryDefaults","mutationDefaults","mountCount","mount","unsubscribeFocus","unsubscribeOnline","unmount","_this$unsubscribeFocu","_this$unsubscribeOnli","isMutating","getQueryData","_this$queryCache$find","ensureQueryData","parsedOptions","cachedData","fetchQuery","getQueriesData","queryKeyOrFilters","setQueryData","updater","input","functionalUpdate","setQueriesData","getQueryState","_this$queryCache$find2","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","all","invalidateQueries","_ref","_filters$refetchType","refetchType","_options$cancelRefetc","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","getDefaultOptions","setDefaultOptions","setQueryDefaults","firstMatchingDefaults","setMutationDefaults","_defaulted","Context","dehydrateMutations","shouldDehydrateMutation","dehydrateMutation","dehydrateQueries","shouldDehydrateQuery","dehydrateQuery","mutateAsync","defaultedQueries","optimisticResult","suspensePromises","queryObserver","firstSingleResultWhichShouldThrow","_defaultedQueries$ind","_defaultedQueries$ind2"],"mappings":"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"}